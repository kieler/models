graph G1
node ExtendedBarcode {
	algorithm: org.eclipse.elk.box
	node N1 {
		node Init {
			layout [ size: 42, 34 ]
		}
		node Positioning {
			algorithm: org.eclipse.elk.box
			node N2 {
				node searchStart {
					layout [ size: 102, 34 ]
				}
				node backToStart {
					algorithm: org.eclipse.elk.box
					node N3 {
						node ^start {
							layout [ size: 52, 34 ]
						}
						node atStart {
							layout [ size: 73, 40 ]
						}
						edge atStart0: ^start -> atStart {
							label L26: "!isMotorAMoving && !isMotorBMoving" {
								layout [ size: 273, 17 ]
							}
						}
					}
				}
				node whiteOne {
					layout [ size: 88, 34 ]
				}
				node blackTwo {
					layout [ size: 87, 34 ]
				}
				node finished {
					layout [ size: 84, 40 ]
				}
				edge whiteOne0: searchStart -> whiteOne {
					label L20: "1: searchBarcodeClock && light < lightThreshold / rotateA = rotation - initialRotation; rotateB = rotation - initialRotation; `System.out.print(\"d\")`" {
						layout [ size: 1001, 17 ]
					}
				}
				edge searchStart0: searchStart -> searchStart {
					label L21: "2: searchBarcodeClock / rotateA = -2; rotateB = -2" {
						layout [ size: 348, 17 ]
					}
				}
				edge searchStart0_g8047: backToStart -> searchStart
				edge blackTwo0: whiteOne -> blackTwo {
					label L22: "1: go5mmClock && light > lightThreshold / `System.out.print(\"l\")`; rotateA = rotation; rotateB = rotation" {
						layout [ size: 717, 17 ]
					}
				}
				edge backToStart0: whiteOne -> backToStart {
					label L23: "2: go5mmClock" {
						layout [ size: 107, 17 ]
					}
				}
				edge finished0: blackTwo -> finished {
					label L24: "1: go5mmClock && light < lightThreshold / `System.out.println(\"d\")`" {
						layout [ size: 471, 17 ]
					}
				}
				edge backToStart0_g6051: blackTwo -> backToStart {
					label L25: "2: go5mmClock" {
						layout [ size: 107, 17 ]
					}
				}
			}
		}
		node Read {
			layout [ size: 58, 34 ]
		}
		node WaitForMotorAB {
			layout [ size: 135, 34 ]
		}
		node BitsToNumbers {
			algorithm: org.eclipse.elk.box
			node N4 {
				node init {
					layout [ size: 42, 34 ]
				}
				node invalidCombination {
					layout [ size: 163, 40 ]
				}
				node done {
					layout [ size: 503, 56 ]
				}
				edge done0: init -> done {
					label L27: "1: bits == 2221121 / outputNumber = outputNumber + readNumberCounter * 0" {
						layout [ size: 542, 17 ]
					}
				}
				edge done1: init -> done {
					label L28: "2: bits == 2211221 / outputNumber = outputNumber + readNumberCounter * 1" {
						layout [ size: 542, 17 ]
					}
				}
				edge done2: init -> done {
					label L29: "3: bits == 2212211 / outputNumber = outputNumber + readNumberCounter * 2" {
						layout [ size: 542, 17 ]
					}
				}
				edge done3: init -> done {
					label L30: "4: bits == 2111121 / outputNumber = outputNumber + readNumberCounter * 3" {
						layout [ size: 540, 17 ]
					}
				}
				edge done4: init -> done {
					label L31: "5: bits == 2122211 / outputNumber = outputNumber + readNumberCounter * 4" {
						layout [ size: 542, 17 ]
					}
				}
				edge done5: init -> done {
					label L32: "6: bits == 2112221 / outputNumber = outputNumber + readNumberCounter * 5" {
						layout [ size: 542, 17 ]
					}
				}
				edge done6: init -> done {
					label L33: "7: bits == 2121111 / outputNumber = outputNumber + readNumberCounter * 6" {
						layout [ size: 540, 17 ]
					}
				}
				edge done7: init -> done {
					label L34: "8: bits == 2111211 / outputNumber = outputNumber + readNumberCounter * 7" {
						layout [ size: 540, 17 ]
					}
				}
				edge done8: init -> done {
					label L35: "9: bits == 2112111 / outputNumber = outputNumber + readNumberCounter * 8" {
						layout [ size: 540, 17 ]
					}
				}
				edge done9: init -> done {
					label L36: "10: bits == 2221211 / outputNumber = outputNumber + readNumberCounter * 9" {
						layout [ size: 550, 17 ]
					}
				}
				edge invalidCombination0: init -> invalidCombination {
					label L37: "11: / notValid = true" {
						layout [ size: 133, 17 ]
					}
				}
			}
		}
		node CheckEndDelimiter {
			algorithm: org.eclipse.elk.box
			node N5 {
				node searchStart_g5438 {
					layout [ size: 102, 34 ]
				}
				node blackOne {
					layout [ size: 87, 34 ]
				}
				node whiteTwo {
					layout [ size: 88, 34 ]
				}
				node blackTwo_g8546 {
					layout [ size: 87, 34 ]
				}
				node finished_g6970 {
					layout [ size: 84, 40 ]
				}
				edge blackOne0: searchStart_g5438 -> blackOne {
					label L38: "1: go5mmClock && light > lightThreshold / rotateA = rotation; rotateB = rotation; `System.out.print(\"l\")`" {
						layout [ size: 716, 17 ]
					}
				}
				edge finished0_g5262: searchStart_g5438 -> finished_g6970 {
					label L39: "2: go5mmClock / notValid = true" {
						layout [ size: 220, 17 ]
					}
				}
				edge whiteTwo0: blackOne -> whiteTwo {
					label L40: "1: go5mmClock && light < lightThreshold / `System.out.print(\"d\")`; rotateA = rotation; rotateB = rotation" {
						layout [ size: 722, 17 ]
					}
				}
				edge finished0_g3603: blackOne -> finished_g6970 {
					label L41: "2: go5mmClock / notValid = true" {
						layout [ size: 220, 17 ]
					}
				}
				edge blackTwo0_g4074: whiteTwo -> blackTwo_g8546 {
					label L42: "1: go5mmClock && light > lightThreshold / `System.out.println(\"l\")`; rotateA = rotation; rotateB = rotation" {
						layout [ size: 730, 17 ]
					}
				}
				edge finished0_g3022: whiteTwo -> finished_g6970 {
					label L43: "2: go5mmClock / notValid = true" {
						layout [ size: 220, 17 ]
					}
				}
				edge finished0_g1012: blackTwo_g8546 -> finished_g6970 {
					label L44: "1: go5mmClock && light < lightThreshold / `System.out.println(\"d\")`" {
						layout [ size: 471, 17 ]
					}
				}
				edge finished1: blackTwo_g8546 -> finished_g6970 {
					label L45: "2: go5mmClock / notValid = true" {
						layout [ size: 220, 17 ]
					}
				}
			}
		}
		node TestCheckSum {
			algorithm: org.eclipse.elk.box
			node N6 {
				node startCheck {
					layout [ size: 98, 34 ]
				}
				node checkFirstDigit {
					layout [ size: 127, 34 ]
				}
				node checkSecondDigit {
					layout [ size: 149, 34 ]
				}
				node checkThirdDigit {
					layout [ size: 133, 34 ]
				}
				node allChecked {
					layout [ size: 620, 65 ]
				}
				node setDegree {
					algorithm: org.eclipse.elk.box
					node N7 {
						node init_g8651 {
							layout [ size: 182, 50 ]
						}
						node finished_g4856 {
							layout [ size: 84, 40 ]
						}
						edge finished0_g1170: init_g8651 -> finished_g4856 {
							label L53: "1: result > 180 / turnValue = 180 - result" {
								layout [ size: 272, 17 ]
							}
						}
						edge finished1_g0309: init_g8651 -> finished_g4856 {
							label L54: "2: result < -180 / turnValue = 360 + result" {
								layout [ size: 281, 17 ]
							}
						}
						edge finished2: init_g8651 -> finished_g4856 {
							label L55: "3: / turnValue = result" {
								layout [ size: 149, 17 ]
							}
						}
					}
				}
				edge checkFirstDigit0: startCheck -> checkFirstDigit {
					label L46: "/ firstDigit = (outputNumber / 1) % 10" {
						layout [ size: 256, 17 ]
					}
				}
				edge checkSecondDigit0: checkFirstDigit -> checkSecondDigit {
					label L47: "/ secondDigit = (outputNumber / 10) % 10" {
						layout [ size: 288, 17 ]
					}
				}
				edge checkThirdDigit0: checkSecondDigit -> checkThirdDigit {
					label L48: "/ thirdDigit = (outputNumber / 100) % 10" {
						layout [ size: 277, 17 ]
					}
				}
				edge allChecked0: checkThirdDigit -> allChecked {
					label L49: "1: outputNumber / 1000 != 9 - (thirdDigit + secondDigit + firstDigit) % 10 / notValid = true" {
						layout [ size: 611, 17 ]
					}
				}
				edge allChecked1: checkThirdDigit -> allChecked {
					label L50: "2: outputNumber / 1000 == 9 - (thirdDigit + secondDigit + firstDigit) % 10" {
						layout [ size: 503, 17 ]
					}
				}
				edge setDegree0: allChecked -> setDegree {
					label L51: "1: result >= 500 / result = result - 1000" {
						layout [ size: 264, 17 ]
					}
				}
				edge setDegree1: allChecked -> setDegree {
					label L52: "2:" {
						layout [ size: 13, 17 ]
					}
				}
			}
		}
		node Finish {
			layout [ size: 346, 50 ]
		}
		node Exit {
			layout [ size: 53, 40 ]
		}
		node Invalid {
			layout [ size: 248, 56 ]
		}
		node TurningRobot {
			algorithm: org.eclipse.elk.box
			node N8 {
				node driveToTurnpoint {
					layout [ size: 234, 50 ]
				}
				node turn {
					layout [ size: 314, 50 ]
				}
				node forward {
					layout [ size: 234, 50 ]
				}
				node finishedTurning {
					layout [ size: 139, 40 ]
				}
				edge turn0: driveToTurnpoint -> turn {
					label L56: "!isMotorAMoving && !isMotorBMoving" {
						layout [ size: 273, 17 ]
					}
				}
				edge forward0: turn -> forward {
					label L57: "!isMotorAMoving && !isMotorBMoving" {
						layout [ size: 273, 17 ]
					}
				}
				edge finishedTurning0: forward -> finishedTurning {
					label L58: "!isMotorAMoving && !isMotorBMoving" {
						layout [ size: 273, 17 ]
					}
				}
			}
		}
		edge Positioning0: Init -> Positioning {
			label L1: "startButton / floodLight = true" {
				layout [ size: 210, 17 ]
			}
		}
		edge Invalid0: Positioning -> Invalid {
			label L2: "1: notValid == true" {
				layout [ size: 127, 17 ]
			}
		}
		edge Read0: Positioning -> Read {
			label L3: "2: / rotateA = rotation; rotateB = rotation" {
				layout [ size: 280, 17 ]
			}
		}
		edge WaitForMotorAB0: Read -> WaitForMotorAB {
			label L4: "1: countToSeven >= 7" {
				layout [ size: 155, 17 ]
			}
		}
		edge CheckEndDelimiter0: Read -> CheckEndDelimiter {
			label L5: "2: readNumberCounter > 1000" {
				layout [ size: 212, 17 ]
			}
		}
		edge Read0_g8885: Read -> Read {
			label L6: "3: go5mmClock && light < lightThreshold && countToSeven == 6 / rotateA = rotation + correctionRotation; rotateB = rotation + 5; `System.out.print(\"d\")`; bits = bits * 10 + 1; countToSeven = countToSeven + 1" {
				layout [ size: 1455, 17 ]
			}
		}
		edge Read1: Read -> Read {
			label L7: "4: go5mmClock && light < lightThreshold / rotateA = rotation; rotateB = rotation; `System.out.print(\"d\")`; bits = bits * 10 + 1; countToSeven = countToSeven + 1" {
				layout [ size: 1112, 17 ]
			}
		}
		edge Read2: Read -> Read {
			label L8: "5: go5mmClock && countToSeven == 6 / rotateA = rotation + 5; rotateB = rotation + correctionRotation; `System.out.print(\"l\")`; bits = bits * 10 + 2; countToSeven = countToSeven + 1" {
				layout [ size: 1268, 17 ]
			}
		}
		edge Read3: Read -> Read {
			label L9: "6: go5mmClock / rotateA = rotation; rotateB = rotation; `System.out.print(\"l\")`; bits = bits * 10 + 2; countToSeven = countToSeven + 1" {
				layout [ size: 925, 17 ]
			}
		}
		edge BitsToNumbers0: WaitForMotorAB -> BitsToNumbers {
			label L10: "!isMotorAMoving && !isMotorBMoving" {
				layout [ size: 273, 17 ]
			}
		}
		edge Invalid0_g2872: BitsToNumbers -> Invalid {
			label L11: "1: notValid == true" {
				layout [ size: 127, 17 ]
			}
		}
		edge Read0_g3221: BitsToNumbers -> Read {
			label L12: "2:" {
				layout [ size: 13, 17 ]
			}
		}
		edge Invalid0_g7569: CheckEndDelimiter -> Invalid {
			label L13: "1: notValid == true" {
				layout [ size: 127, 17 ]
			}
		}
		edge TestCheckSum0: CheckEndDelimiter -> TestCheckSum {
			label L14: "2:" {
				layout [ size: 13, 17 ]
			}
		}
		edge Invalid0_g9146: TestCheckSum -> Invalid {
			label L15: "1: notValid == true" {
				layout [ size: 127, 17 ]
			}
		}
		edge Finish0: TestCheckSum -> Finish {
			label L16: "2:" {
				layout [ size: 13, 17 ]
			}
		}
		edge TurningRobot0: Finish -> TurningRobot {
			label L17: "1: !hasTurned / validLight = false" {
				layout [ size: 229, 17 ]
			}
		}
		edge Exit0: Finish -> Exit {
			label L18: "2: hasTurned" {
				layout [ size: 93, 17 ]
			}
		}
		edge Positioning0_g7163: TurningRobot -> Positioning {
			label L19: "/ rotation = -51" {
				layout [ size: 102, 17 ]
			}
		}
	}
}
